# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Build SringbootApplication with Reactjs

on:
  push:
    branches: [ wip_docker ]

jobs:
  backend:
      name: Build SringbootApplication
      runs-on: ubuntu-latest

      steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn clean install
      - name: Build & push Docker image
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          image: yashuyellapu/employee-portal-fullstack
          tags: backend-latest
          registry: docker.io
          dockerfile: Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

  frontend:
        name: Build ReactJs
        runs-on: ubuntu-latest

        steps:
          - uses: actions/checkout@v3
          - name: Use Node.js
            uses: actions/setup-node@v3
            with:
              node-version: 16
              cache: 'npm'
              cache-dependency-path: ./frontend/package-lock.json
          - name: Install node packages
            working-directory: ./frontend
            run: |
              npm install 
              pwd
          - name: Build & push Docker image
            uses: mr-smithers-excellent/docker-build-push@v5
            with:
              directory: ./frontend/
              image: yashuyellapu/employee-portal-fullstack
              tags: frontend-latest
              registry: docker.io
              dockerfile: ./frontend/Dockerfile
              username: ${{ secrets.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_PASSWORD }}
  deploy:
        name: Deploy application into ec2 instance
        runs-on: ubuntu-latest

        steps:
          - name: Checkout the files
            uses: actions/checkout@v3

          - name: Deploy to ec2 ubuntu server
            uses: easingthemes/ssh-deploy@main
            env:
              SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
              REMOTE_HOST: ${{ secrets.HOST_DNS }}
              REMOTE_USER: ${{ secrets.USERNAME }}
              TARGET: ${{ secrets.TARGET_DIR }}
          - name: Run compose files
            run: |
              docker-compose down
              docker-compose up

